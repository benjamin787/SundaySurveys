{"version":3,"sources":["components/SurveyPage.js","components/SurveyCard.js","components/SurveyContainer.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["SurveyPage","openSurvey","setOpenSurvey","survey_questions","makeQuestions","map","question","name","id","title","content","isRequired","type","console","log","JSON","stringify","survey","Survey","elements","collectAnswers","answerStorage","forEach","push","getValue","model","onComplete","event","preventDefault","fetch","method","headers","body","questionsOnPageMode","navigateToUrl","to","SurveyCard","onClick","className","SurveyContainer","surveys","key","Home","color","surveyURL","App","useState","setSurveys","useEffect","a","promise","json","surveyData","fetchData","Container","maxWidth","exact","path","component","render","routerProps","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5734c35a.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport * as Survey from 'survey-react'\nimport 'survey-react/survey.css'\n\nconst responseURL = 'http://localhost:3000/question_responses'\n\nfunction SurveyPage({ openSurvey, setOpenSurvey }) {\n\n    const { survey_questions } = openSurvey\n\n    const makeQuestions = () => {\n        return survey_questions.map(question => {\n            return (\n                { name: `${question.id}`,\n                title: `${question.content}`,\n                isRequired: true,\n                type: 'radiogroup',\n                }\n            )\n        })\n    }\n\n    const makeJSON = () => {\n        return (\n            { title: `${openSurvey.title}`,\n                name: `${openSurvey.id}`,\n                elements: JSON.stringify(makeQuestions())\n            }\n        )\n    }\n\n    console.log('json', JSON.stringify(makeQuestions()))\n    \n    const survey = new Survey.Survey(makeJSON())\n    console.log('survey', survey)\n\n    const collectAnswers = () => {\n        let answerStorage = []\n        survey_questions.forEach(question => {\n            answerStorage.push(survey.getValue(`${question.id}`))\n        })\n        return answerStorage\n    }\n    \n    const submitAnswers = (event) => {\n        event.preventDefault()\n\n        fetch(responseURL, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(collectAnswers())\n        })\n        setOpenSurvey({})\n    }\n    \n    \n    return (\n        <div>\n            <Survey.Survey\n                model={survey}\n                onComplete={submitAnswers}\n                questionsOnPageMode='singlePage'\n                navigateToUrl='/'\n            />\n            <br/>\n            <Link to='/'><button>Cancel</button></Link>\n        </div>\n    )\n}\n\nexport default SurveyPage\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AssessmentIcon from '@material-ui/icons/Assessment'\n\n\nimport SurveyPage from './SurveyPage'\n\nexport default function SurveyCard({ survey, setOpenSurvey }) {\n\n    const takeSurvey = () => {\n        console.log('clicked')\n        setOpenSurvey(survey)\n        // return <SurveyPage survey={survey} key={survey.id} />\n    }\n\n\n\n    return (\n        <div onClick={takeSurvey} className='survey-card'>\n            <Link to={`/surveys/${survey.id}`} >\n                <AssessmentIcon />\n                <button className='survey-title'>{survey.title}</button>\n            </Link>\n        </div>\n    )\n}","import React from 'react'\n\nimport SurveyCard from './SurveyCard'\n\nexport default function SurveyContainer({ surveys, setOpenSurvey }) {\n    \n    const displaySurveyCards = () => surveys.map(survey => {\n        return <SurveyCard survey={survey} key={survey.id} setOpenSurvey={setOpenSurvey} />\n    })\n\n    return (\n        <div className='survey-container'>\n            {displaySurveyCards()}\n        </div>\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox'\nimport Assignment from '@material-ui/icons/Assignment'\nimport PieChart from '@material-ui/icons/PieChart'\n\n\nimport * as Survey from 'survey-react'\nimport 'survey-react/survey.css'\n\n\nfunction Home() {\n\n\n\n    return (\n        <div>\n            <Link to=''>\n                <AddBox color='primary' />\n                {/* <img src={AddBox} alt='Create Survey' /> */}\n                <h2 className='home-label'>Bug your friends with endless questions!</h2>\n            </Link>\n            <Link to='/surveys'>\n                <Assignment color='primary' />\n                {/* <img src={Assignment} alt='View Surveys' /> */}\n                <h2 className='home-label'>Check out your surveys</h2>\n            </Link>\n            {/* link to view results, hopefully graphs */}\n            <Link to='' >\n                <PieChart />\n                {/* <img src={PieChart} alt='View Results' /> */}\n                <h2 className='home-label'>Past Survey Results</h2>\n            </Link>\n        </div>\n    )\n}\n\nexport default Home\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\n\n\nimport SurveyContainer from './components/SurveyContainer'\nimport Home from './components/Home'\nimport SurveyPage from './components/SurveyPage'\n\nconst surveyURL = 'http://localhost:3000/surveys'\n\nfunction App() {\n\n  const [surveys, setSurveys] = useState([])\n  const [openSurvey, setOpenSurvey] = useState({})\n\n  useEffect(() => {\n    async function fetchData() {\n      let promise = await fetch(surveyURL)\n      let surveyData = await promise.json()\n      setSurveys(surveyData)\n    }\n    fetchData()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth='sm'>\n        <h1>Sunday with the Firooz's</h1>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route \n            exact path='/surveys'\n            render={routerProps =>\n              <SurveyContainer\n              surveys={surveys}\n              setOpenSurvey={setOpenSurvey}\n              {...routerProps}\n              />}\n              />\n          <Route\n            path={`/surveys/${openSurvey.id}`}\n            render={routerProps => <SurveyPage\n              openSurvey={openSurvey}\n              setOpenSurvey={setOpenSurvey}\n              />}\n              />\n          {/* <SurveyContainer surveys={surveys} /> */}\n          {/* redirect back to home, with error message - like 'survey already completed' */}\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}