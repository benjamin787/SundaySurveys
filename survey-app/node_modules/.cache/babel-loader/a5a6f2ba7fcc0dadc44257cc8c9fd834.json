{"ast":null,"code":"var _jsxFileName = \"/Users/benrowe/Development/Flatiron/comeback/4mod/project/survey-app/src/components/SurveyPage.js\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport RadioGroup from '@material-ui/core/FormGroup';\nimport Radio from '@material-ui/core/Radio';\nimport ListItem from '@material-ui/core/ListItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport * as Survey from 'survey-react';\nimport 'survey-react/survey.css';\nconst responseURL = 'http://localhost:3000/question_responses';\n\nfunction SurveyPage({\n  openSurvey\n}) {\n  const {\n    register,\n    handleSubmit,\n    getValues\n  } = useForm();\n  const [choice, setChoice] = useState(0);\n  const json = {\n    elements: [{\n      type: 'text',\n      name: 'customerName',\n      title: 'name?',\n      isRequired: true\n    }]\n  };\n\n  const onComplete = (survey, options) => {\n    console.log('survey results' + JSON.stringify(survey.data));\n  };\n\n  const handleChange = event => {\n    setChoice(event.target.value);\n  };\n\n  const displayOptions = () => {\n    for (const i in [1, 2, 3, 4]) {\n      return /*#__PURE__*/React.createElement(FormControlLabel, {\n        value: i,\n        label: i,\n        labelPlacement: \"bottom\",\n        checked: false,\n        control: /*#__PURE__*/React.createElement(Radio, {\n          inputRef: register,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 26\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 22\n        }\n      });\n    }\n  };\n\n  const displayQuestions = () => {\n    openSurvey.survey_questions.map(question => {\n      console.log('question displayed?', question);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }, question.content), /*#__PURE__*/React.createElement(FormControl, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }, question.content), /*#__PURE__*/React.createElement(RadioGroup, {\n        \"aria-label\": \"meaning\",\n        name: question.id,\n        value: choice,\n        row: true,\n        onChange: handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }\n      }, displayOptions())));\n    });\n  };\n\n  const submitAnswers = event => {\n    event.preventDefault();\n    const answers = getValues();\n    console.log(answers);\n    const confirmation = fetch(responseURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(answers)\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \" */}\", /*#__PURE__*/React.createElement(Survey.Survey, {\n    json: json,\n    onComplete: onComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 26\n    }\n  }, \"Cancel\")));\n}\n\nexport default SurveyPage;","map":{"version":3,"sources":["/Users/benrowe/Development/Flatiron/comeback/4mod/project/survey-app/src/components/SurveyPage.js"],"names":["React","useState","useForm","Link","RadioGroup","Radio","ListItem","FormControl","FormControlLabel","FormLabel","Survey","responseURL","SurveyPage","openSurvey","register","handleSubmit","getValues","choice","setChoice","json","elements","type","name","title","isRequired","onComplete","survey","options","console","log","JSON","stringify","data","handleChange","event","target","value","displayOptions","i","displayQuestions","survey_questions","map","question","content","id","submitAnswers","preventDefault","answers","confirmation","fetch","method","headers","body"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { Link } from 'react-router-dom'\nimport RadioGroup from '@material-ui/core/FormGroup'\nimport Radio from '@material-ui/core/Radio'\nimport ListItem from '@material-ui/core/ListItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\n\nimport * as Survey from 'survey-react'\nimport 'survey-react/survey.css'\n\nconst responseURL = 'http://localhost:3000/question_responses'\n\nfunction SurveyPage({ openSurvey }) {\n\n    const { register, handleSubmit, getValues } = useForm()\n\n    const [choice, setChoice] = useState(0)\n\n    const json = {\n        elements: [\n            { type: 'text', name: 'customerName', title: 'name?', isRequired: true }\n        ]\n    }\n\n    const onComplete = (survey, options) => {\n        console.log('survey results' + JSON.stringify(survey.data))\n    }\n\n\n\n\n\n    \n    const handleChange = (event) => {\n        setChoice(event.target.value)\n    }\n\n    const displayOptions = () => {\n        for (const i in [1, 2, 3, 4]) {\n            return ( <FormControlLabel\n                value={i}\n                label={i}\n                labelPlacement='bottom'\n                checked={false}\n                control={<Radio inputRef={register} />}\n            /> )\n        }\n    }\n\n    const displayQuestions = () => {\n        openSurvey.survey_questions.map(question => {\n            console.log('question displayed?', question)\n            return ( \n                <div>\n                    <p>{question.content}</p>\n                    <FormControl>\n                        <FormLabel>{question.content}</FormLabel>\n                        <RadioGroup aria-label='meaning' name={question.id} value={choice} row onChange={handleChange} >\n                            {displayOptions()}\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n            )\n        })\n    }\n\n    const submitAnswers = (event) => {\n        event.preventDefault()\n        const answers = getValues()\n        console.log(answers)\n        const confirmation = fetch(responseURL, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(answers)\n        })\n    }\n    \n    \n    return (\n        <div>\n            {/* <h2>{openSurvey.title}</h2> */}\n            {/* <form className='questions-list'\n                onSubmit={submitAnswers}>\n\n                {displayQuestions()}\n\n                {/* <ol>\n                    {displayQuestions()}\n                </ol> */}\n                {/* <button type='submit'>Submit</button>\n            </form> */} */}\n            <Survey.Survey json={json} onComplete={onComplete} />\n            <br/>\n            <Link to='/'><button>Cancel</button></Link>\n        </div>\n    )\n}\n\nexport default SurveyPage\n"]},"metadata":{},"sourceType":"module"}